{"version":3,"sources":["components/CopyBtn.js","components/Card.js","components/ColorPallete.js","components/GenerateBtn.js","components/Description.js","components/Footer.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["CopyBtn","colorHex","hex","alert","useAlert","class","onSuccess","show","icon","faClipboard","Card","pallete","forEach","color","toString","toUpperCase","convert","style","backgroundColor","ColorPallete","GenerateBtn","onClick","Description","Footer","href","target","faGithub","Header","faFillDrip","App","useState","setPallete","a","data","model","headers","axios","post","then","res","result","colorPallete","console","log","useEffect","window","addEventListener","event","keyCode","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","options","position","positions","TOP_RIGHT","timeout","type","types","SUCCESS","offset","transition","transitions","SCALE","ReactDOM","render","StrictMode","template","AlertTemplate","document","getElementById"],"mappings":"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","file":"static/js/main.24296068.chunk.js","sourcesContent":["import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faClipboard } from '@fortawesome/free-solid-svg-icons'\nimport Clipboard from 'react-clipboard.js';\nimport { useAlert } from 'react-alert'\n\nconst CopyBtn = ({ hex }) => {\n  const colorHex = '#' + hex\n  const alert = useAlert()\n  const onSuccess = () => {\n    alert.show(`Copied color to clipboard`)\n  }\n  return (\n    <div class=\"clip\">\n      <Clipboard data-clipboard-text={colorHex} button-title=\"Copy HEX\" onSuccess={ onSuccess }>\n        <FontAwesomeIcon icon={ faClipboard } />\n      </Clipboard>\n    </div>\n  )\n}\n\nexport default CopyBtn\n","import React from 'react'\nimport CopyBtn from './CopyBtn'\n\nconst Card = ({ pallete }) => {\n  let hex = ''\n  const convert = (pallete) => {\n    pallete.forEach(color => {\n      hex += color.toString(16)\n    })\n    return hex.toUpperCase()\n  }\n  hex = convert(pallete)\n\n  return (\n    <div class=\"card-container\">\n      <div class=\"color\" style={{ backgroundColor: `#${hex}` }}></div>\n      <CopyBtn hex={ hex } />\n      <div class=\"hex\">#{ hex }</div>\n    </div>\n  )\n}\n\nexport default Card\n","import React from 'react'\nimport Card from './Card'\n\nconst ColorPallete = ({ pallete }) => {\n  return (\n    <div class=\"pallete-container\">\n      <Card pallete={ pallete[0] }/>\n      <Card pallete={ pallete[1] }/>\n      <Card pallete={ pallete[2] }/>\n      <Card pallete={ pallete[3] }/>\n      <Card pallete={ pallete[4] } />\n    </div>\n  )\n}\n\nexport default ColorPallete\n","import React from 'react'\n\nconst GenerateBtn = ({ onClick }) => {\n  return (\n    <div class=\"btn-container\">\n      <button class=\"btn hover:bg-teal-blue-light hover:translate-y-0.5 transform transition\" onClick={onClick} >Generate</button>\n    </div>\n  )\n}\n\nexport default GenerateBtn\n","import React from 'react'\n\nconst Description = () => {\n  return (\n    <div>\n      <p class=\"description\">Or simply press the 'spacebar' to generate a new color pallete</p>\n    </div>\n  )\n}\n\nexport default Description\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faGithub } from '@fortawesome/free-brands-svg-icons'\n\nconst Footer = () => {\n  return (\n    <div class=\"footer\">\n      <p class=\"footer-text\">Made with\n      <span class=\"text-red-400 mx-2\">&#9829;</span>\n        by Sherry Liao &copy; 2021 <a href=\"https://github.com/sherryliao21\" target=\"_blank\"><FontAwesomeIcon icon={ faGithub } class=\"github-logo\"/></a></p>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFillDrip } from '@fortawesome/free-solid-svg-icons'\n\n\nconst Header = () => {\n  const title = 'Color Pallete Generator'\n\n  return (\n    <div>\n      <h1 class=\"app-title\">{ title }<FontAwesomeIcon icon={ faFillDrip } class=\"swatchbook\"/></h1>\n    </div>\n  )\n}\n\nexport default Header\n","import { useState, useEffect } from 'react';\nimport ColorPallete from './components/ColorPallete';\nimport GenerateBtn from './components/GenerateBtn';\nimport Description from './components/Description';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport axios from 'axios'\n\nfunction App() {\n  // default colors\n  const [pallete, setPallete] = useState([\n    [54, 38, 39],\n    [191, 78, 75],\n    [245, 166, 159],\n    [223, 184, 147],\n    [96, 89, 85]\n  ])\n  // generate color\n  const onClick = async() => {\n    const url = 'http://colormind.io/api/'\n    const data = {\n      model : \"default\",\n    }\n    const headers = {\n      'Content-Type': 'text/plain'\n    };\n    const colorPallete = await axios.post(url, data, { headers }).then(res => res.data.result) // array of 5\n    console.log(colorPallete)\n    setPallete(colorPallete)\n  }\n\n  useEffect(() => {\n    const handleSpacebar = (event) => {\n       if (event.keyCode === 32) {\n        onClick()\n      }\n    }\n    window.addEventListener('keypress', handleSpacebar)\n\n    // return () => {\n    //   window.removeEventListener('keydown', handleSpacebar)\n    // }\n  }, [])\n\n  return (\n    <div className=\"App\" class=\"app\">\n      <Header />\n      <ColorPallete pallete={ pallete }/>\n      <GenerateBtn onClick={onClick}/>\n      <Description />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { transitions, positions, Provider as AlertProvider, types } from 'react-alert'\nimport AlertTemplate from 'react-alert-template-basic'\nimport reportWebVitals from './reportWebVitals';\n\n// optional configuration\nconst options = {\n  position: positions.TOP_RIGHT,\n  timeout: 1000,\n  type: types.SUCCESS,\n  offset: '10px',\n  transition: transitions.SCALE\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <AlertProvider template={AlertTemplate} {...options}>\n      <App />\n    </AlertProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}